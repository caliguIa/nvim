-- Initialize global state variable
HasLaravelCommand = false

-- Define the function to create Laravel command
local function TryCreateLaravelCommand()
    -- Only run in Laravel projects with artisan and composer
    if
        vim.fn.filereadable("./artisan") == 1
        and vim.fn.filereadable("./composer.json") == 1
        and HasLaravelCommand == false
    then
        vim.cmd([[
      let g:lava_commands_str = ""

      function! s:append_cmd(cmd, prefix)
        let s:args_json = system(a:cmd)
        let s:args_decoded = json_decode(s:args_json)

        let s:commands = s:args_decoded["commands"]

        for cmd in s:commands
          let s:command_name = cmd["name"]
          if s:command_name != "_complete" && s:command_name != "completion"
            let g:lava_commands_str .= a:prefix . s:command_name . "\n"
          endif
        endfor
      endfunction

      function! LavaArgs(...)
        if !exists("g:lava_args")
          " PHP Artisan
          call s:append_cmd("php artisan list --format=json --short", "")

          " Composer
          call s:append_cmd("composer list --format=json --short", "composer:")

          let g:lava_args = g:lava_commands_str
        endif

        return g:lava_args
      endfunction
    ]])

        local function laravel(opts_)
            local args = table.concat(opts_.fargs, " ")

            -- PHP Artisan
            if not vim.startswith(args, "composer:") then
                vim.cmd("term artisan " .. args)
            -- Composer
            else
                local rest = vim.trim(args:sub(10))
                vim.cmd("term composer " .. rest)
            end
        end

        vim.api.nvim_create_user_command("Laravel", laravel, {
            desc = "Shorthand for running Laravel (Lava) commands in a terminal buffer",
            nargs = "*",
            complete = "custom,LavaArgs",
        })

        HasLaravelCommand = true
    else
        if vim.fn.exists(":Laravel") == 1 then
            vim.api.nvim_del_user_command("Laravel")
            HasLaravelCommand = false
        end
    end
end

-- Execute the command once on startup
TryCreateLaravelCommand()

-- Create the cache clear command
vim.api.nvim_create_user_command(
    "LaravelCacheClear",
    [[
  if exists("g:lava_args")
    unlet g:lava_args
    let g:lava_commands_str = ""
  endif
  echo "Cleared Laravel command cache."
]],
    {
        desc = "Clears the cache of commands generated by :Laravel.",
        nargs = 0,
    }
)

-- Set up the autocmd to try creating the Laravel command when directory changes
vim.api.nvim_create_autocmd("DirChanged", {
    group = vim.api.nvim_create_augroup("laravel-command", { clear = true }),
    callback = TryCreateLaravelCommand,
})
